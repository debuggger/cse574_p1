function [] = proj1()
    %% Import data from spreadsheet
    % Script for importing data from the following spreadsheet:
    %
    %    Workbook: S:\windows\cse574\university-data.xlsx Worksheet:
    %    university_data
    %
    % To extend the code for use with different selected data or a different
    % spreadsheet, generate a function instead of a script.

    % Auto-generated by MATLAB on 2015/09/05 22:19:41

    %% Import the data
    [~, ~, raw] = xlsread('S:\windows\cse574\university-data.xlsx','university_data','A2:G50');
    raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
    cellVectors = raw(:,2);
    raw = raw(:,[1,3,4,5,6,7]);

    %% Replace non-numeric cells with NaN
    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
    raw(R) = {NaN}; % Replace non-numeric cells

    %% Create output variable
    data = reshape([raw{:}],size(raw));

    %% Allocate imported array to column variable names
    rank1 = data(:,1);
    name = cellVectors(:,1);
    CSScoreUSNews = data(:,2);
    ResearchOverhead = data(:,3);
    AdminBasePay = data(:,4);
    Tuitionoutstate = data(:,5);
    CSGradStudentNo = data(:,6);

    %% Clear temporary variables
    clearvars raw cellVectors R;

    %% details
    UBitName = ['f' 'a' 'y' 'a' 'z' 'a' 'h' 'm']
    personNumber = [5 0 1 7 0 3 3 1]

    %%Calculating mean
    mu1 = mean(CSScoreUSNews)
    mu2 = mean(ResearchOverhead)
    mu3 = mean(AdminBasePay)
    mu4 = mean(Tuitionoutstate)

    %%Calculating variance
    var1 = var(CSScoreUSNews)
    var2 = var(ResearchOverhead)
    var3 = var(AdminBasePay)
    var4 = var(Tuitionoutstate)

    %%Calcualting standard deviation sigma
    sigma1 = std(CSScoreUSNews)
    sigma2 = std(ResearchOverhead)
    sigma3 = std(AdminBasePay)
    sigma4 = std(Tuitionoutstate)

    %%Computing covariances and correlation co-efficients

    numericData = horzcat(data(:, 2), data(:, 3), data(:, 4), data(:, 5))

    covarianceMat = cov(numericData)

    correlationMat = corrcoef(numericData)

    %%Computing log likelihood
    pd1 = normpdf(numericData(:, 1), mu1, sigma1);
    logLikelihood1 = sum(arrayfun(@(x) log(x), pd1));

    pd2 = normpdf(numericData(:, 2), mu2, sigma2);
    logLikelihood2 = sum(arrayfun(@(x) log(x), pd2));

    pd3 = normpdf(numericData(:, 3), mu3, sigma3);
    logLikelihood3 = sum(arrayfun(@(x) log(x), pd3));

    pd4 = normpdf(numericData(:, 4), mu4, sigma4);
    logLikelihood4 = sum(arrayfun(@(x) log(x), pd4));

    %pd = mvnpdf(numericData, [mu1 mu2 mu3 mu4], covarianceMat);
    logLikelihood = logLikelihood1 + logLikelihood2 + logLikelihood3 + logLikelihood4

    BNgraph = [0,1,1,1;0,0,1,1;0,0,0,1;0,0,0,0];

    jointProbabilityList = zeros(length(data(:, 1)), length(numericData(1, :)));

    for i=1:length(BNgraph(:, 1))
        parentList = [];
        for j=1:length(BNgraph(1, :))
            if BNgraph(j, i) == 1
                parentList = [parentList, j];
            end
        end
        if isempty(parentList)
            temp = computeMarginalProbability(numericData, i);
            mptemp = sum(log(temp));
            jointProbabilityList(:, i) = temp;
        else
            temp = computeJointProbability(numericData, i, parentList);
            jointProbabilityList(:, i) = temp;
        end
    end

    BNlogLikelihood = sum(sum(log(jointProbabilityList)))
    
    assignin('base', 'UBitName', UBitName)
    assignin('base', 'personNumber', personNumber)
    assignin('base', 'mu1', mu1)
    assignin('base', 'mu2', mu2)
    assignin('base', 'mu3', mu3)
    assignin('base', 'mu4', mu4)
    assignin('base', 'var1', var1)
    assignin('base', 'var2', var2)
    assignin('base', 'var3', var3)
    assignin('base', 'var4', var4)
    assignin('base', 'sigma1', sigma1)
    assignin('base', 'sigma2', sigma2)
    assignin('base', 'sigma3', sigma3)
    assignin('base', 'sigma4', sigma4)
    assignin('base', 'covarianceMat', covarianceMat)
    assignin('base', 'correlationMat', correlationMat)
    assignin('base', 'logLikelihood', logLikelihood)
    assignin('base', 'BNgraph', BNgraph)
    assignin('base', 'BNlogLikelihood', BNlogLikelihood)
    
    %createfigure(CSScoreUSNews, ResearchOverhead, 'CSScoreUSNews', 'ResearchOverhead')
    %createfigure(CSScoreUSNews, AdminBasePay, 'CSScoreUSNews', 'AdminBasePay')
    %createfigure(CSScoreUSNews, Tuitionoutstate, 'CSScoreUSNews', 'Tuitionoutstate')
    %createfigure(ResearchOverhead, AdminBasePay, 'ResearchOverhead', 'AdminBasePay')
    %createfigure(ResearchOverhead, Tuitionoutstate, 'ResearchOverhead', 'Tuitionoutstate')
    %createfigure(AdminBasePay, Tuitionoutstate, 'AdminBasePay', 'Tuitionoutstate')
end

function jp = computeJointProbability(data, startVertex, nodeList)
   edgeList = [startVertex, nodeList];
   numeratorData = data(:, edgeList);
   denominatorData = data(:, nodeList);
   
   numeratorDataMean = mean(numeratorData);
   denominatorDataMean = mean(denominatorData);
   
   numeratorProbability = mvnpdf(numeratorData, numeratorDataMean, cov(numeratorData)); 
   denominatorProbability = mvnpdf(denominatorData, denominatorDataMean, cov(denominatorData)); 
   
   jp = numeratorProbability ./ denominatorProbability;
   
end

function mp = computeMarginalProbability(data, node)
    dataVector = data(:, node);
    mp = normpdf(dataVector, mean(dataVector), std(dataVector));
end

function createfigure(X1, Y1, xLabel, yLabel)
    %CREATEFIGURE(X1, Y1, S1, C1)
    %  X1:  scatter x
    %  Y1:  scatter y
    %  S1:  scatter s
    %  C1:  scatter c

    %  Auto-generated by MATLAB on 22-Sep-2015 14:03:14

    % Create figure
    figure1 = figure;

    % Create axes
    axes1 = axes('Parent',figure1);
    hold(axes1,'on');

    % Create scatter
    scatter(X1,Y1, 25, 'filled');
    
    xlabel(xLabel)
    ylabel(yLabel)

end

function BNGraphList = generateGraphs(size)
    BNGraphList = []
    bstr = dec2bin(0:2.^(size*size)-1,log2(size*size))
    
    for i=1:length(bstr(1,:))
        out = str2num(reshape(bstr(i,:)',[],1))'
        BNGraphList = [BNGraphList; reshape(out, size, [])]
    end

end

